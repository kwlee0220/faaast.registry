plugins {
	id 'java-library'
	id 'eclipse'
}

group = 'de.fraunhofer.iosb.ilt.faaast'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = '17'
targetCompatibility = '17'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

ext {
	jackson_version = '2.17.2'
	logback_version = '1.5.3'
	spring_boot_version = '3.2.4'
	snakeyaml_version = '2.2'
	h2_version = '2.2.224'
	assertj_version = '3.25.3'
	hibernate_version = '6.4.4.Final'
	spring_boot_version = '3.2.4'
	postgresql_version = '42.7.3'
	picocli_version = '4.7.5'
	assertj_version = '3.25.3'
	hibernate_version = '6.4.4.Final'
	
	aas4j_version = '1.0.2'
	
	junit_version = '4.13.2'
	mockito_version = '3.12.4'
}

repositories {
    mavenCentral()
}

dependencies {
	implementation project(':faaast')

	implementation "ch.qos.logback:logback-classic:${logback_version}"
	implementation "ch.qos.logback:logback-core:${logback_version}"
	implementation "com.h2database:h2:${h2_version}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
	implementation "info.picocli:picocli:${picocli_version}"

	implementation "org.postgresql:postgresql:${postgresql_version}"
	testImplementation "org.assertj:assertj-core:${assertj_version}"

	// Spring boot
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

javadoc {
	options.encoding = 'UTF-8'
	options.links("https://docs.oracle.com/javase/8/docs/api/")
	options.links("https://google.github.io/guava/releases/23.0/api/docs/")
	options.links("http://reactivex.io/RxJava/javadoc/")
}
task javadocJar(type: Jar) {
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}
